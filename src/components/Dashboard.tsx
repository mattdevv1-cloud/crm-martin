import React, { useEffect, useState } from 'react';
import { apiCall } from '../utils/api';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { 
  ShoppingCart, 
  Package, 
  AlertCircle, 
  TrendingUp,
  Clock,
  CheckCircle,
  Database 
} from 'lucide-react';
import { toast } from 'sonner@2.0.3';
import { useAuth } from './AuthContext';

interface DashboardStats {
  totalOrders: number;
  todayOrders: number;
  newOrders: number;
  inProgressOrders: number;
  totalProducts: number;
  totalStock: number;
  lowStock: number;
}

export function Dashboard() {
  const { user } = useAuth();
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [initializingDemo, setInitializingDemo] = useState(false);

  useEffect(() => {
    loadStats();
  }, []);

  const loadStats = async () => {
    try {
      const data = await apiCall('/stats/dashboard');
      setStats(data.stats);
    } catch (error) {
      console.error('Failed to load stats:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInitDemo = async () => {
    if (!confirm('–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ? (–ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤, –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –æ–±—Ä–∞–∑—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤)')) return;
    
    try {
      setInitializingDemo(true);
      const result = await apiCall('/init-demo', { method: 'POST' });
      toast.success(result.message);
      loadStats();
    } catch (error: any) {
      toast.error('–û—à–∏–±–∫–∞: ' + error.message);
    } finally {
      setInitializingDemo(false);
    }
  };

  if (loading) {
    return (
      <div className="p-4 md:p-8">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/2 md:w-1/4"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="h-32 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  const statCards = [
    {
      title: '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤',
      value: stats?.totalOrders || 0,
      icon: ShoppingCart,
      color: 'text-blue-600',
      bgColor: 'bg-blue-50',
    },
    {
      title: '–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤',
      value: stats?.todayOrders || 0,
      icon: Clock,
      color: 'text-green-600',
      bgColor: 'bg-green-50',
    },
    {
      title: '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
      value: stats?.newOrders || 0,
      icon: AlertCircle,
      color: 'text-orange-600',
      bgColor: 'bg-orange-50',
    },
    {
      title: '–í —Ä–∞–±–æ—Ç–µ',
      value: stats?.inProgressOrders || 0,
      icon: TrendingUp,
      color: 'text-purple-600',
      bgColor: 'bg-purple-50',
    },
    {
      title: '–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
      value: stats?.totalProducts || 0,
      icon: Package,
      color: 'text-indigo-600',
      bgColor: 'bg-indigo-50',
    },
    {
      title: '–ù–∞ —Å–∫–ª–∞–¥–µ',
      value: stats?.totalStock || 0,
      icon: CheckCircle,
      color: 'text-teal-600',
      bgColor: 'bg-teal-50',
    },
    {
      title: '–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏',
      value: stats?.lowStock || 0,
      icon: AlertCircle,
      color: 'text-red-600',
      bgColor: 'bg-red-50',
    },
  ];

  return (
    <div className="p-4 md:p-8">
      <div className="mb-4 md:mb-8 flex flex-col md:flex-row md:justify-between md:items-start gap-4">
        <div>
          <h1 className="text-2xl md:text-3xl mb-2">–î–∞—à–±–æ—Ä–¥</h1>
          <p className="text-gray-600">–û–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π</p>
        </div>
        {user?.role === 'admin' && stats?.totalProducts === 0 && (
          <Button onClick={handleInitDemo} disabled={initializingDemo} className="w-full md:w-auto">
            <Database className="h-4 w-4 mr-2" />
            {initializingDemo ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ'}
          </Button>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
        {statCards.map((stat, index) => {
          const Icon = stat.icon;
          return (
            <Card key={index}>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm">{stat.title}</CardTitle>
                <div className={`p-2 rounded-lg ${stat.bgColor}`}>
                  <Icon className={`h-5 w-5 ${stat.color}`} />
                </div>
              </CardHeader>
              <CardContent>
                <div className="text-3xl">{stat.value}</div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      <div className="mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <p className="text-sm text-gray-600">‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</p>
            <p className="text-sm text-gray-600">‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥</p>
            <p className="text-sm text-gray-600">‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç–∞–≤–æ–∫</p>
            <p className="text-sm text-gray-600">‚Ä¢ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            {stats?.newOrders ? (
              <p className="text-sm text-orange-600">‚Ä¢ {stats.newOrders} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
            ) : null}
            {stats?.lowStock ? (
              <p className="text-sm text-red-600">‚Ä¢ {stats.lowStock} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º</p>
            ) : null}
            {!stats?.newOrders && !stats?.lowStock && (
              <p className="text-sm text-gray-600">–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚úì</p>
            )}
          </CardContent>
        </Card>
      </div>

      {stats?.totalProducts === 0 && (
        <Card className="mt-6 bg-blue-50 border-blue-200">
          <CardHeader>
            <CardTitle>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM —Å–∏—Å—Ç–µ–º—É!</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h3 className="mb-2">–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</h3>
              <ol className="text-sm space-y-2 ml-5 list-decimal">
                <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <strong>"–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"</strong> –≤—ã—à–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑—Ü–æ–≤</li>
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <strong>–°–∫–ª–∞–¥</strong> –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥ —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏</li>
                <li>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ä–∞–∑–¥–µ–ª–µ <strong>–ó–∞–∫–∞–∑—ã</strong></li>
                <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—Ä–æ–¥–∞–∂ –≤ <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</strong></li>
              </ol>
            </div>
            <div className="pt-4 border-t border-blue-200">
              <h3 className="mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h3>
              <div className="grid grid-cols-2 gap-2 text-sm">
                <div>‚úì –°–µ—Ä–∏–π–Ω—ã–π —É—á—ë—Ç —Ç–æ–≤–∞—Ä–æ–≤</div>
                <div>‚úì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</div>
                <div>‚úì –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç–∞–≤–æ–∫</div>
                <div>‚úì –û—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                <div>‚úì –ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞</div>
                <div>‚úì –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
